# -*- coding: utf-8 -*-
"""IndiartoAjiBegawan - Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tpKmAp10sGYncImFDpipRXMsXa-5vo0q

# Identitas Diri
Nama : Indiarto Aji Begawan \
Email : indiartoaji13@gmail.com \
Learning Path : Belajar Pengembangan Machine Learning \
Materi : Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series \

# Library
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt

from keras.models import Sequential
from keras.layers import Dense, LSTM, GRU
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

"""# Stock Prediction"""

df = pd.read_csv('IBM.csv')
df

"""Dataset iambil dari yahoo finance dengan nama saham IBM (https://finance.yahoo.com/quote/IBM/history?period1=-252374400&period2=1663459200&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true)"""

df.info()

threshold_mae = (df['Adj Close'].max() - df['Adj Close'].min()) * 10/100
threshold_mae

"""Block diatas bertujuan untuk melihat threshold dari MAE untuk dapat mengkalkulasi persyaratan yang diberikan"""

df['Date'] = pd.to_datetime(df['Date']).dt.date
dates      = df['Date'].values
close      = df['Adj Close'].values
 
plt.figure(figsize=(15,5))
plt.plot(dates,close)
plt.title('IBM Stock Historical Prices',
          fontsize=20);

scaler = MinMaxScaler()

close = np.reshape(close,(-1,1))
close = scaler.fit_transform(close)

plt.figure(figsize=(15,5))
plt.plot(dates,close)
plt.title('Apple Stock Historical Prices',
          fontsize=20);

close = np.reshape(close,(-1))

"""Block diatas bertujuan untuk menampilkan data saham dari kolom Adj Close (harga penutupan saham pada hari tersebut) yang telah di di scaling dalam rentang nilai 0-1."""

x_train, x_test, y_train, y_test = train_test_split(close, dates, test_size=0.2, shuffle=False)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
test_set = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=1000)

"""Block diatas bertujuan untuk membuat data training dan testing dari dataset saham yang dipilih."""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])
optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

"""Model yang dibuat mengikuti materi yang diberikan pada Dicoding."""

history = model.fit(train_set,epochs=10, validation_data=test_set, verbose=2)

"""Terdapat perbedaan yang mencolok jika dataset menggunakan MinMaxScaler dan yang tidak menggunakan. Dataset yang menggunakan MinMixScaler cenderung memiliki selisih nilai MAE dan Validation MAE yang sangat kecil, berbanding terbalik jika tidak menggunakan MinMixScaler yang memiliki nilai selisih sampai 60 point. Hal tersebutlah yang menjadi alasan mengapa dalam script ini menggunakan MinMaxScaler."""

print(history.history.keys())

# Grafik Accuracy dan Validation Accuracy
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model Accuracy')
plt.ylabel('MAE')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Grafik Accuracy dan Validation Accuracy
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

"""Nilai MAE dan Loss pada train dan test cenderung memiliki grafik yang sama. """